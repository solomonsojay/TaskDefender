rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // TaskDefender Users - Users can only access their own data
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // TaskDefender Tasks - Users can only access their own tasks
    match /tasks/{taskId} {
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // TaskDefender Teams - Team members can read, admins can write
    match /teams/{teamId} {
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.members[].userId;
      allow create: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.adminId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.adminId;
    }

    // TaskDefender Focus Sessions - Users can only access their own sessions
    match /focus_sessions/{sessionId} {
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // TaskDefender Analytics - Users can only access their own analytics
    match /analytics/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // TaskDefender Social Connections - Users can only access their own connections
    match /social_connections/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Allow admins to read and write all documents (existing rule)
    match /{document=**} {
      allow read, write: if hasAnyRole(["ADMIN", "OWNER"]);
    }

    // Rowy: Allow signed in users to read Rowy configuration and admins to write
    match /rowy/{docId} {
      allow read: if request.auth.token.roles.size() > 0;
      allow write: if hasAnyRole(["ADMIN", "OWNER"]);
    	match /{document=**} {
        allow read: if request.auth.token.roles.size() > 0;
        allow write: if hasAnyRole(["ADMIN", "OWNER"]);
      }
      match /schema/{tableId} {
        allow update: if canModify(tableId,'pc')
        match /{document=**} {allow read,write: if canModify(tableId,'pc')}
      }
       match /groupSchema/{tableId} {
        allow update: if canModify(tableId,'cg')
        match /{document=**} {allow read,write: if canModify(tableId,'cg')}
      }
    	function canModify(tableId,tableType) {
      	return hasAnyRole(get(/databases/$(database)/documents/rowy/settings)
        .data.tablesSettings[tableType][tableId].modifiableBy)
	   	}
    }

    // Rowy: Allow users to edit their settings
    match /rowy/userManagement/users/{userId} {
      allow get, update, delete: if isDocOwner(userId);
      allow create: if request.auth.token.roles.size() > 0;
    }

    // Rowy: Allow public to read public Rowy configuration
    match /rowy/publicSettings {
      allow get: if true;
    }

    // Existing rules for other collections
    match /{document=**} {
      allow read, write: if request.auth.token.email.matches("firebase@flutterflow.io");
    }

    match /hotel/{document} {
      allow create: if request.auth != null;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    match /trips/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /payments/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    match /location/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    match /reviews/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /rooms/{document} {
      allow create: if request.auth != null;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    match /anonymous/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /ff_user_push_notifications/{document} {
      allow create: if /databases/$(database)/documents/users/$(request.auth.uid) == request.resource.data.sender;
      allow read: if false;
      allow write: if false;
      allow delete: if false;
    }

    match /chats/{document} {
      allow create: if /databases/$(database)/documents/users/$(request.auth.uid) in request.resource.data.users;
      allow read: if /databases/$(database)/documents/users/$(request.auth.uid) in resource.data.users;
      allow write: if /databases/$(database)/documents/users/$(request.auth.uid) in resource.data.users;
      allow delete: if false;
    }

    match /chat_messages/{document} {
      allow create: if /databases/$(database)/documents/users/$(request.auth.uid) in get(request.resource.data.chat).data.users
&& /databases/$(database)/documents/users/$(request.auth.uid) == request.resource.data.user;
      allow read: if /databases/$(database)/documents/users/$(request.auth.uid) in get(resource.data.chat).data.users;
      allow write: if false;
      allow delete: if false;
    }

    match /amenitities/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    match /serviceFee/{document} {
      allow create: if request.auth != null;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    match /bookings/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /properties/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    // Utility functions
    function isDocOwner(docId) {
      return request.auth != null && (request.auth.uid == resource.id || request.auth.uid == docId);
    }
    
    function hasAnyRole(roles) {
      return request.auth != null && request.auth.token.roles.hasAny(roles);
    }

    // Default deny rule (keep at the end)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}